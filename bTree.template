// Name: Alexis Martinez
// Date: 11/10/2023
// Description: cpp file for class bTree
//splitting into a template file: Neidy

//default constuctor
template<typename T>
bTree<T>::bTree() {
    root = nullptr;
}
//Precondition : None
//Postcondition: Returns true or false
template<typename T>
bool bTree<T>::isEmpty() const {
    return root == nullptr;
}

//Precondition : Requires a valid data type
//Postcondition: Inserts that data into the bTree
template<typename T>
void bTree<T>::insert(T data) {
    root = insertNode(root, data);
}
//Precondition : Requires a valid data type 
//Postcondition: removes a node/leaf from bTree
template<typename T>
void bTree<T>::remove(T data) {
    root = deleteNode(root, data);
}
//Precondition : None
//Postcondition: Returns the count of the nodes in the bTree
template<typename T>
int bTree<T>::count() {
    return countNodes(root);
}
//Precondition : Requires a valid data type 
//Postcondition: Finds that valid data type in the bTree
template<typename T>
bool bTree<T>::find(T data) {
    return search(root, data) != nullptr;
}
//Precondition : None
//Postcondition: Posts in PreOrder
template<typename T>
void bTree<T>::preOrder() {
    preOrderTraversal(root);
}
//Precondition : None
//Postcondition: Posts in inOrder 
template<typename T>
void bTree<T>::inOrder() {
    inOrderTraversal(root);
}
//Precondition : None
//Postcondition: Posts in PostOrder
template<typename T>
void bTree<T>::postOrder() {
    postOrderTraversal(root);
}
//Precondition : None 
//Postcondition: Deletes the binary tree
template<typename T>
void bTree<T>::deleteTree() {
    eraseTree(root);
    root = nullptr;
}
//Precondition : Requires a pointer to a node and a valid data type 
//Postcondition: inserts a Node into the bTree
template<typename T>
typename bTree<T>::Node* bTree<T>::insertNode(Node* root, T data) {
    if (root == nullptr) {
        return new Node(data);
    }

    if (data < root->data) {
        root->left = insertNode(root->left, data);
    }
    else if (data > root->data || data == root->data) {
        root->right = insertNode(root->right, data);
    }

    return root;
}
//Precondition : Requires a pointer to a node
//Postcondition: finds the min value node
template<typename T>
typename bTree<T>::Node* bTree<T>::findMin(Node* node) {
    Node* current = node;
    while (current && current->left != nullptr) {
        current = current->left;
    }
    return current;
}
//Precondition : Requires a pointer to a node and a valid data type
//Postcondition: Deletes a node in the bTree
template<typename T>
typename bTree<T>::Node* bTree<T>::deleteNode(Node* root, T data) {
    if (root == nullptr)
        return root;

    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    }
    else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    }
    else {
        if (root->left != nullptr && root->right != nullptr) {

            Node* succ = findMin(root->right);
            root->data = succ->data;
            root->right = deleteNode(root->right, succ->data);
        }
        else {
            Node* temp = root->left ? root->left : root->right;

            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            }
            else {
                *root = *temp;
            }

            delete temp;
        }
    }
    return root;
}
//Precondition : Requires a pointer to a node 
//Postcondition: Returns the count of the nodes in the bTree
template<typename T>
int bTree<T>::countNodes(Node* root) {
    if (root == nullptr) {
        return 0;
    }
    return 1 + countNodes(root->left) + countNodes(root->right);
}
//Precondition : Requires a pointer to a node and a valid data type 
//Postcondition: searches the bTree and returns that value 
template<typename T>
typename bTree<T>::Node* bTree<T>::search(Node* root, T data) {
    if (root == nullptr || root->data == data) {
        return root;
    }

    if (data < root->data) {
        return search(root->left, data);
    }
    else {
        return search(root->right, data);
    }
}
//Precondition : requires a pointer to a node 
//Postcondition: posts the tree content in preOrder
template<typename T>
void bTree<T>::preOrderTraversal(Node* root) {
    if (root != nullptr) {
        cout << "\t\t" << root->data << "\n";
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}
//Precondition : Requires to a pointer to a node 
//Postcondition: posts the tree content in inorder 
template<typename T>
void bTree<T>::inOrderTraversal(Node* root) {
    if (root != nullptr) {
        inOrderTraversal(root->left);
        cout << "\t\t" << root->data << "\n";
        inOrderTraversal(root->right);
    }
}
//Precondition : Requires a pointer to node
//Postcondition: posts the tree content in postOrder 
template<typename T>
void bTree<T>::postOrderTraversal(Node* root) {
    if (root != nullptr) {
        postOrderTraversal(root->left);
        postOrderTraversal(root->right);
        cout << "\t\t" << root->data << "\n";
    }
}
//Precondition : Requires a pointer to a node
//Postcondition: deletes the bTree
template<typename T>
void bTree<T>::eraseTree(Node* root) {
    if (root != nullptr) {
        eraseTree(root->left);
        eraseTree(root->right);
        delete root;
    }
}
